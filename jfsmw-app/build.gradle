/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10.2/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
}

import java.util.regex.Matcher

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

ext.moduleName = 'net.jfilesync.jfsmw.core.app'

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    runtimeOnly project(':jfsmw-core')
    implementation project(':jfsmw-core.ui')
    implementation project(':jfsmw-core.ui.impl')
    implementation project(':jfsmw-core')
    implementation project(':jfsmw-core.impl')
    implementation "com.google.inject:guice:${guice_version}"
    implementation "com.google.guava:guava:${guava_version}"

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

// tag::run[]
// Define the main class for the application
mainClassName = "$moduleName/net.jfilesync.jfsmw.app.App" // <1>

run {
    inputs.property("moduleName", moduleName)
    doFirst {
        def args = [
                '--module-path', classpath.asPath,
                '--module', mainClassName // <2>
        ]
        classpath = files()
        if (System.getProperty('DEBUG', 'false') == 'true') {
            print("JUHU")
            args.addAll(0, [
                    '-Xdebug',
                    '-agentlib:jdwp=transport=dt_socket,server=n,address=aurora-lm:5005,suspend=y'
            ])
        }
        jvmArgs = args
        println jvmArgs
    }
}
// end::run[]

// tag::startScripts[]
startScripts {
    inputs.property("moduleName", moduleName)
    doFirst {
        classpath = files()
        defaultJvmOpts = [
                '--module-path', 'APP_HOME_LIBS',  // <1>
                '--module', mainClassName
        ]
    }
    doLast {
        def bashFile = new File(outputDir, applicationName)
        String bashContent = bashFile.text
        bashFile.text = bashContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('$APP_HOME/lib'))

        def batFile = new File(outputDir, applicationName + ".bat")
        String batContent = batFile.text
        batFile.text = batContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('%APP_HOME%\\lib'))
    }
}
// end::startScripts[]
